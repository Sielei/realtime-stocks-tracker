/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.hs.kafka.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Avro schema for stock price */
@org.apache.avro.specific.AvroGenerated
public class StockPrice extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5156297519967230335L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StockPrice\",\"namespace\":\"com.hs.kafka.avro.model\",\"doc\":\"Avro schema for stock price\",\"fields\":[{\"name\":\"symbol\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The identifier of the stock.\"},{\"name\":\"exchange\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The stock exchange the stock was traded.\"},{\"name\":\"price\",\"type\":\"double\",\"doc\":\"The value the stock was traded for.\"},{\"name\":\"dayHighPrice\",\"type\":\"double\",\"doc\":\"The highest value the stock was traded for on that day.\"},{\"name\":\"dayLowPrice\",\"type\":\"double\",\"doc\":\"The lowest value the stock was traded for on that day.\"},{\"name\":\"previousClosePrice\",\"type\":\"double\",\"doc\":\"The value the stock was traded for at the close of market.\"},{\"name\":\"volumeTraded\",\"type\":\"int\",\"doc\":\"The amount of stocks traded on that day.\"},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The currency the stock was traded in.\"},{\"name\":\"tradeTime\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"Epoch millis timestamp at which the stock trade took place.\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<StockPrice> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<StockPrice> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<StockPrice> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<StockPrice> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<StockPrice> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this StockPrice to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a StockPrice from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a StockPrice instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static StockPrice fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The identifier of the stock. */
  private java.lang.String symbol;
  /** The stock exchange the stock was traded. */
  private java.lang.String exchange;
  /** The value the stock was traded for. */
  private double price;
  /** The highest value the stock was traded for on that day. */
  private double dayHighPrice;
  /** The lowest value the stock was traded for on that day. */
  private double dayLowPrice;
  /** The value the stock was traded for at the close of market. */
  private double previousClosePrice;
  /** The amount of stocks traded on that day. */
  private int volumeTraded;
  /** The currency the stock was traded in. */
  private java.lang.String currency;
  /** Epoch millis timestamp at which the stock trade took place. */
  private java.time.Instant tradeTime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public StockPrice() {}

  /**
   * All-args constructor.
   * @param symbol The identifier of the stock.
   * @param exchange The stock exchange the stock was traded.
   * @param price The value the stock was traded for.
   * @param dayHighPrice The highest value the stock was traded for on that day.
   * @param dayLowPrice The lowest value the stock was traded for on that day.
   * @param previousClosePrice The value the stock was traded for at the close of market.
   * @param volumeTraded The amount of stocks traded on that day.
   * @param currency The currency the stock was traded in.
   * @param tradeTime Epoch millis timestamp at which the stock trade took place.
   */
  public StockPrice(java.lang.String symbol, java.lang.String exchange, java.lang.Double price, java.lang.Double dayHighPrice, java.lang.Double dayLowPrice, java.lang.Double previousClosePrice, java.lang.Integer volumeTraded, java.lang.String currency, java.time.Instant tradeTime) {
    this.symbol = symbol;
    this.exchange = exchange;
    this.price = price;
    this.dayHighPrice = dayHighPrice;
    this.dayLowPrice = dayLowPrice;
    this.previousClosePrice = previousClosePrice;
    this.volumeTraded = volumeTraded;
    this.currency = currency;
    this.tradeTime = tradeTime.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return symbol;
    case 1: return exchange;
    case 2: return price;
    case 3: return dayHighPrice;
    case 4: return dayLowPrice;
    case 5: return previousClosePrice;
    case 6: return volumeTraded;
    case 7: return currency;
    case 8: return tradeTime;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: symbol = value$ != null ? value$.toString() : null; break;
    case 1: exchange = value$ != null ? value$.toString() : null; break;
    case 2: price = (java.lang.Double)value$; break;
    case 3: dayHighPrice = (java.lang.Double)value$; break;
    case 4: dayLowPrice = (java.lang.Double)value$; break;
    case 5: previousClosePrice = (java.lang.Double)value$; break;
    case 6: volumeTraded = (java.lang.Integer)value$; break;
    case 7: currency = value$ != null ? value$.toString() : null; break;
    case 8: tradeTime = (java.time.Instant)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'symbol' field.
   * @return The identifier of the stock.
   */
  public java.lang.String getSymbol() {
    return symbol;
  }


  /**
   * Sets the value of the 'symbol' field.
   * The identifier of the stock.
   * @param value the value to set.
   */
  public void setSymbol(java.lang.String value) {
    this.symbol = value;
  }

  /**
   * Gets the value of the 'exchange' field.
   * @return The stock exchange the stock was traded.
   */
  public java.lang.String getExchange() {
    return exchange;
  }


  /**
   * Sets the value of the 'exchange' field.
   * The stock exchange the stock was traded.
   * @param value the value to set.
   */
  public void setExchange(java.lang.String value) {
    this.exchange = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value the stock was traded for.
   */
  public double getPrice() {
    return price;
  }


  /**
   * Sets the value of the 'price' field.
   * The value the stock was traded for.
   * @param value the value to set.
   */
  public void setPrice(double value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'dayHighPrice' field.
   * @return The highest value the stock was traded for on that day.
   */
  public double getDayHighPrice() {
    return dayHighPrice;
  }


  /**
   * Sets the value of the 'dayHighPrice' field.
   * The highest value the stock was traded for on that day.
   * @param value the value to set.
   */
  public void setDayHighPrice(double value) {
    this.dayHighPrice = value;
  }

  /**
   * Gets the value of the 'dayLowPrice' field.
   * @return The lowest value the stock was traded for on that day.
   */
  public double getDayLowPrice() {
    return dayLowPrice;
  }


  /**
   * Sets the value of the 'dayLowPrice' field.
   * The lowest value the stock was traded for on that day.
   * @param value the value to set.
   */
  public void setDayLowPrice(double value) {
    this.dayLowPrice = value;
  }

  /**
   * Gets the value of the 'previousClosePrice' field.
   * @return The value the stock was traded for at the close of market.
   */
  public double getPreviousClosePrice() {
    return previousClosePrice;
  }


  /**
   * Sets the value of the 'previousClosePrice' field.
   * The value the stock was traded for at the close of market.
   * @param value the value to set.
   */
  public void setPreviousClosePrice(double value) {
    this.previousClosePrice = value;
  }

  /**
   * Gets the value of the 'volumeTraded' field.
   * @return The amount of stocks traded on that day.
   */
  public int getVolumeTraded() {
    return volumeTraded;
  }


  /**
   * Sets the value of the 'volumeTraded' field.
   * The amount of stocks traded on that day.
   * @param value the value to set.
   */
  public void setVolumeTraded(int value) {
    this.volumeTraded = value;
  }

  /**
   * Gets the value of the 'currency' field.
   * @return The currency the stock was traded in.
   */
  public java.lang.String getCurrency() {
    return currency;
  }


  /**
   * Sets the value of the 'currency' field.
   * The currency the stock was traded in.
   * @param value the value to set.
   */
  public void setCurrency(java.lang.String value) {
    this.currency = value;
  }

  /**
   * Gets the value of the 'tradeTime' field.
   * @return Epoch millis timestamp at which the stock trade took place.
   */
  public java.time.Instant getTradeTime() {
    return tradeTime;
  }


  /**
   * Sets the value of the 'tradeTime' field.
   * Epoch millis timestamp at which the stock trade took place.
   * @param value the value to set.
   */
  public void setTradeTime(java.time.Instant value) {
    this.tradeTime = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Creates a new StockPrice RecordBuilder.
   * @return A new StockPrice RecordBuilder
   */
  public static com.hs.kafka.avro.model.StockPrice.Builder newBuilder() {
    return new com.hs.kafka.avro.model.StockPrice.Builder();
  }

  /**
   * Creates a new StockPrice RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StockPrice RecordBuilder
   */
  public static com.hs.kafka.avro.model.StockPrice.Builder newBuilder(com.hs.kafka.avro.model.StockPrice.Builder other) {
    if (other == null) {
      return new com.hs.kafka.avro.model.StockPrice.Builder();
    } else {
      return new com.hs.kafka.avro.model.StockPrice.Builder(other);
    }
  }

  /**
   * Creates a new StockPrice RecordBuilder by copying an existing StockPrice instance.
   * @param other The existing instance to copy.
   * @return A new StockPrice RecordBuilder
   */
  public static com.hs.kafka.avro.model.StockPrice.Builder newBuilder(com.hs.kafka.avro.model.StockPrice other) {
    if (other == null) {
      return new com.hs.kafka.avro.model.StockPrice.Builder();
    } else {
      return new com.hs.kafka.avro.model.StockPrice.Builder(other);
    }
  }

  /**
   * RecordBuilder for StockPrice instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StockPrice>
    implements org.apache.avro.data.RecordBuilder<StockPrice> {

    /** The identifier of the stock. */
    private java.lang.String symbol;
    /** The stock exchange the stock was traded. */
    private java.lang.String exchange;
    /** The value the stock was traded for. */
    private double price;
    /** The highest value the stock was traded for on that day. */
    private double dayHighPrice;
    /** The lowest value the stock was traded for on that day. */
    private double dayLowPrice;
    /** The value the stock was traded for at the close of market. */
    private double previousClosePrice;
    /** The amount of stocks traded on that day. */
    private int volumeTraded;
    /** The currency the stock was traded in. */
    private java.lang.String currency;
    /** Epoch millis timestamp at which the stock trade took place. */
    private java.time.Instant tradeTime;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.hs.kafka.avro.model.StockPrice.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.symbol)) {
        this.symbol = data().deepCopy(fields()[0].schema(), other.symbol);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.exchange)) {
        this.exchange = data().deepCopy(fields()[1].schema(), other.exchange);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.price)) {
        this.price = data().deepCopy(fields()[2].schema(), other.price);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.dayHighPrice)) {
        this.dayHighPrice = data().deepCopy(fields()[3].schema(), other.dayHighPrice);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.dayLowPrice)) {
        this.dayLowPrice = data().deepCopy(fields()[4].schema(), other.dayLowPrice);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.previousClosePrice)) {
        this.previousClosePrice = data().deepCopy(fields()[5].schema(), other.previousClosePrice);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.volumeTraded)) {
        this.volumeTraded = data().deepCopy(fields()[6].schema(), other.volumeTraded);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.currency)) {
        this.currency = data().deepCopy(fields()[7].schema(), other.currency);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.tradeTime)) {
        this.tradeTime = data().deepCopy(fields()[8].schema(), other.tradeTime);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing StockPrice instance
     * @param other The existing instance to copy.
     */
    private Builder(com.hs.kafka.avro.model.StockPrice other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.symbol)) {
        this.symbol = data().deepCopy(fields()[0].schema(), other.symbol);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.exchange)) {
        this.exchange = data().deepCopy(fields()[1].schema(), other.exchange);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.price)) {
        this.price = data().deepCopy(fields()[2].schema(), other.price);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.dayHighPrice)) {
        this.dayHighPrice = data().deepCopy(fields()[3].schema(), other.dayHighPrice);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.dayLowPrice)) {
        this.dayLowPrice = data().deepCopy(fields()[4].schema(), other.dayLowPrice);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.previousClosePrice)) {
        this.previousClosePrice = data().deepCopy(fields()[5].schema(), other.previousClosePrice);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.volumeTraded)) {
        this.volumeTraded = data().deepCopy(fields()[6].schema(), other.volumeTraded);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.currency)) {
        this.currency = data().deepCopy(fields()[7].schema(), other.currency);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.tradeTime)) {
        this.tradeTime = data().deepCopy(fields()[8].schema(), other.tradeTime);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'symbol' field.
      * The identifier of the stock.
      * @return The value.
      */
    public java.lang.String getSymbol() {
      return symbol;
    }


    /**
      * Sets the value of the 'symbol' field.
      * The identifier of the stock.
      * @param value The value of 'symbol'.
      * @return This builder.
      */
    public com.hs.kafka.avro.model.StockPrice.Builder setSymbol(java.lang.String value) {
      validate(fields()[0], value);
      this.symbol = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'symbol' field has been set.
      * The identifier of the stock.
      * @return True if the 'symbol' field has been set, false otherwise.
      */
    public boolean hasSymbol() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'symbol' field.
      * The identifier of the stock.
      * @return This builder.
      */
    public com.hs.kafka.avro.model.StockPrice.Builder clearSymbol() {
      symbol = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'exchange' field.
      * The stock exchange the stock was traded.
      * @return The value.
      */
    public java.lang.String getExchange() {
      return exchange;
    }


    /**
      * Sets the value of the 'exchange' field.
      * The stock exchange the stock was traded.
      * @param value The value of 'exchange'.
      * @return This builder.
      */
    public com.hs.kafka.avro.model.StockPrice.Builder setExchange(java.lang.String value) {
      validate(fields()[1], value);
      this.exchange = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'exchange' field has been set.
      * The stock exchange the stock was traded.
      * @return True if the 'exchange' field has been set, false otherwise.
      */
    public boolean hasExchange() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'exchange' field.
      * The stock exchange the stock was traded.
      * @return This builder.
      */
    public com.hs.kafka.avro.model.StockPrice.Builder clearExchange() {
      exchange = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * The value the stock was traded for.
      * @return The value.
      */
    public double getPrice() {
      return price;
    }


    /**
      * Sets the value of the 'price' field.
      * The value the stock was traded for.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public com.hs.kafka.avro.model.StockPrice.Builder setPrice(double value) {
      validate(fields()[2], value);
      this.price = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * The value the stock was traded for.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'price' field.
      * The value the stock was traded for.
      * @return This builder.
      */
    public com.hs.kafka.avro.model.StockPrice.Builder clearPrice() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'dayHighPrice' field.
      * The highest value the stock was traded for on that day.
      * @return The value.
      */
    public double getDayHighPrice() {
      return dayHighPrice;
    }


    /**
      * Sets the value of the 'dayHighPrice' field.
      * The highest value the stock was traded for on that day.
      * @param value The value of 'dayHighPrice'.
      * @return This builder.
      */
    public com.hs.kafka.avro.model.StockPrice.Builder setDayHighPrice(double value) {
      validate(fields()[3], value);
      this.dayHighPrice = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'dayHighPrice' field has been set.
      * The highest value the stock was traded for on that day.
      * @return True if the 'dayHighPrice' field has been set, false otherwise.
      */
    public boolean hasDayHighPrice() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'dayHighPrice' field.
      * The highest value the stock was traded for on that day.
      * @return This builder.
      */
    public com.hs.kafka.avro.model.StockPrice.Builder clearDayHighPrice() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'dayLowPrice' field.
      * The lowest value the stock was traded for on that day.
      * @return The value.
      */
    public double getDayLowPrice() {
      return dayLowPrice;
    }


    /**
      * Sets the value of the 'dayLowPrice' field.
      * The lowest value the stock was traded for on that day.
      * @param value The value of 'dayLowPrice'.
      * @return This builder.
      */
    public com.hs.kafka.avro.model.StockPrice.Builder setDayLowPrice(double value) {
      validate(fields()[4], value);
      this.dayLowPrice = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'dayLowPrice' field has been set.
      * The lowest value the stock was traded for on that day.
      * @return True if the 'dayLowPrice' field has been set, false otherwise.
      */
    public boolean hasDayLowPrice() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'dayLowPrice' field.
      * The lowest value the stock was traded for on that day.
      * @return This builder.
      */
    public com.hs.kafka.avro.model.StockPrice.Builder clearDayLowPrice() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'previousClosePrice' field.
      * The value the stock was traded for at the close of market.
      * @return The value.
      */
    public double getPreviousClosePrice() {
      return previousClosePrice;
    }


    /**
      * Sets the value of the 'previousClosePrice' field.
      * The value the stock was traded for at the close of market.
      * @param value The value of 'previousClosePrice'.
      * @return This builder.
      */
    public com.hs.kafka.avro.model.StockPrice.Builder setPreviousClosePrice(double value) {
      validate(fields()[5], value);
      this.previousClosePrice = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'previousClosePrice' field has been set.
      * The value the stock was traded for at the close of market.
      * @return True if the 'previousClosePrice' field has been set, false otherwise.
      */
    public boolean hasPreviousClosePrice() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'previousClosePrice' field.
      * The value the stock was traded for at the close of market.
      * @return This builder.
      */
    public com.hs.kafka.avro.model.StockPrice.Builder clearPreviousClosePrice() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'volumeTraded' field.
      * The amount of stocks traded on that day.
      * @return The value.
      */
    public int getVolumeTraded() {
      return volumeTraded;
    }


    /**
      * Sets the value of the 'volumeTraded' field.
      * The amount of stocks traded on that day.
      * @param value The value of 'volumeTraded'.
      * @return This builder.
      */
    public com.hs.kafka.avro.model.StockPrice.Builder setVolumeTraded(int value) {
      validate(fields()[6], value);
      this.volumeTraded = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'volumeTraded' field has been set.
      * The amount of stocks traded on that day.
      * @return True if the 'volumeTraded' field has been set, false otherwise.
      */
    public boolean hasVolumeTraded() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'volumeTraded' field.
      * The amount of stocks traded on that day.
      * @return This builder.
      */
    public com.hs.kafka.avro.model.StockPrice.Builder clearVolumeTraded() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'currency' field.
      * The currency the stock was traded in.
      * @return The value.
      */
    public java.lang.String getCurrency() {
      return currency;
    }


    /**
      * Sets the value of the 'currency' field.
      * The currency the stock was traded in.
      * @param value The value of 'currency'.
      * @return This builder.
      */
    public com.hs.kafka.avro.model.StockPrice.Builder setCurrency(java.lang.String value) {
      validate(fields()[7], value);
      this.currency = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'currency' field has been set.
      * The currency the stock was traded in.
      * @return True if the 'currency' field has been set, false otherwise.
      */
    public boolean hasCurrency() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'currency' field.
      * The currency the stock was traded in.
      * @return This builder.
      */
    public com.hs.kafka.avro.model.StockPrice.Builder clearCurrency() {
      currency = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'tradeTime' field.
      * Epoch millis timestamp at which the stock trade took place.
      * @return The value.
      */
    public java.time.Instant getTradeTime() {
      return tradeTime;
    }


    /**
      * Sets the value of the 'tradeTime' field.
      * Epoch millis timestamp at which the stock trade took place.
      * @param value The value of 'tradeTime'.
      * @return This builder.
      */
    public com.hs.kafka.avro.model.StockPrice.Builder setTradeTime(java.time.Instant value) {
      validate(fields()[8], value);
      this.tradeTime = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'tradeTime' field has been set.
      * Epoch millis timestamp at which the stock trade took place.
      * @return True if the 'tradeTime' field has been set, false otherwise.
      */
    public boolean hasTradeTime() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'tradeTime' field.
      * Epoch millis timestamp at which the stock trade took place.
      * @return This builder.
      */
    public com.hs.kafka.avro.model.StockPrice.Builder clearTradeTime() {
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public StockPrice build() {
      try {
        StockPrice record = new StockPrice();
        record.symbol = fieldSetFlags()[0] ? this.symbol : (java.lang.String) defaultValue(fields()[0]);
        record.exchange = fieldSetFlags()[1] ? this.exchange : (java.lang.String) defaultValue(fields()[1]);
        record.price = fieldSetFlags()[2] ? this.price : (java.lang.Double) defaultValue(fields()[2]);
        record.dayHighPrice = fieldSetFlags()[3] ? this.dayHighPrice : (java.lang.Double) defaultValue(fields()[3]);
        record.dayLowPrice = fieldSetFlags()[4] ? this.dayLowPrice : (java.lang.Double) defaultValue(fields()[4]);
        record.previousClosePrice = fieldSetFlags()[5] ? this.previousClosePrice : (java.lang.Double) defaultValue(fields()[5]);
        record.volumeTraded = fieldSetFlags()[6] ? this.volumeTraded : (java.lang.Integer) defaultValue(fields()[6]);
        record.currency = fieldSetFlags()[7] ? this.currency : (java.lang.String) defaultValue(fields()[7]);
        record.tradeTime = fieldSetFlags()[8] ? this.tradeTime : (java.time.Instant) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<StockPrice>
    WRITER$ = (org.apache.avro.io.DatumWriter<StockPrice>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<StockPrice>
    READER$ = (org.apache.avro.io.DatumReader<StockPrice>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










